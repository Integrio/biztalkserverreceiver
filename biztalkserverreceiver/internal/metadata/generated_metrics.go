// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/filter"
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver"
)

// AttributeHostInstanceStatus specifies the value host_instance.status attribute.
type AttributeHostInstanceStatus int

const (
	_ AttributeHostInstanceStatus = iota
	AttributeHostInstanceStatusStopped
	AttributeHostInstanceStatusRunning
	AttributeHostInstanceStatusUnknown
)

// String returns the string representation of the AttributeHostInstanceStatus.
func (av AttributeHostInstanceStatus) String() string {
	switch av {
	case AttributeHostInstanceStatusStopped:
		return "stopped"
	case AttributeHostInstanceStatusRunning:
		return "running"
	case AttributeHostInstanceStatusUnknown:
		return "unknown"
	}
	return ""
}

// MapAttributeHostInstanceStatus is a helper map of string to AttributeHostInstanceStatus attribute value.
var MapAttributeHostInstanceStatus = map[string]AttributeHostInstanceStatus{
	"stopped": AttributeHostInstanceStatusStopped,
	"running": AttributeHostInstanceStatusRunning,
	"unknown": AttributeHostInstanceStatusUnknown,
}

// AttributeOrchestrationStatus specifies the value orchestration.status attribute.
type AttributeOrchestrationStatus int

const (
	_ AttributeOrchestrationStatus = iota
	AttributeOrchestrationStatusUnenlisted
	AttributeOrchestrationStatusStarted
	AttributeOrchestrationStatusEnlisted
)

// String returns the string representation of the AttributeOrchestrationStatus.
func (av AttributeOrchestrationStatus) String() string {
	switch av {
	case AttributeOrchestrationStatusUnenlisted:
		return "unenlisted"
	case AttributeOrchestrationStatusStarted:
		return "started"
	case AttributeOrchestrationStatusEnlisted:
		return "enlisted"
	}
	return ""
}

// MapAttributeOrchestrationStatus is a helper map of string to AttributeOrchestrationStatus attribute value.
var MapAttributeOrchestrationStatus = map[string]AttributeOrchestrationStatus{
	"unenlisted": AttributeOrchestrationStatusUnenlisted,
	"started":    AttributeOrchestrationStatusStarted,
	"enlisted":   AttributeOrchestrationStatusEnlisted,
}

// AttributeSendPortStatus specifies the value send_port.status attribute.
type AttributeSendPortStatus int

const (
	_ AttributeSendPortStatus = iota
	AttributeSendPortStatusStopped
	AttributeSendPortStatusBound
	AttributeSendPortStatusStarted
)

// String returns the string representation of the AttributeSendPortStatus.
func (av AttributeSendPortStatus) String() string {
	switch av {
	case AttributeSendPortStatusStopped:
		return "stopped"
	case AttributeSendPortStatusBound:
		return "bound"
	case AttributeSendPortStatusStarted:
		return "started"
	}
	return ""
}

// MapAttributeSendPortStatus is a helper map of string to AttributeSendPortStatus attribute value.
var MapAttributeSendPortStatus = map[string]AttributeSendPortStatus{
	"stopped": AttributeSendPortStatusStopped,
	"bound":   AttributeSendPortStatusBound,
	"started": AttributeSendPortStatusStarted,
}

// AttributeSendPortGroupStatus specifies the value send_port_group.status attribute.
type AttributeSendPortGroupStatus int

const (
	_ AttributeSendPortGroupStatus = iota
	AttributeSendPortGroupStatusStopped
	AttributeSendPortGroupStatusBound
	AttributeSendPortGroupStatusStarted
)

// String returns the string representation of the AttributeSendPortGroupStatus.
func (av AttributeSendPortGroupStatus) String() string {
	switch av {
	case AttributeSendPortGroupStatusStopped:
		return "stopped"
	case AttributeSendPortGroupStatusBound:
		return "bound"
	case AttributeSendPortGroupStatusStarted:
		return "started"
	}
	return ""
}

// MapAttributeSendPortGroupStatus is a helper map of string to AttributeSendPortGroupStatus attribute value.
var MapAttributeSendPortGroupStatus = map[string]AttributeSendPortGroupStatus{
	"stopped": AttributeSendPortGroupStatusStopped,
	"bound":   AttributeSendPortGroupStatusBound,
	"started": AttributeSendPortGroupStatusStarted,
}

type metricBiztalkHostInstancesStatus struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills biztalk.host_instances_status metric with initial data.
func (m *metricBiztalkHostInstancesStatus) init() {
	m.data.SetName("biztalk.host_instances_status")
	m.data.SetDescription("Status of host instances in BizTalk Server.")
	m.data.SetUnit("1")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBiztalkHostInstancesStatus) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, hostInstanceStatusAttributeValue string, nameAttributeValue string, hostNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("host_instance.status", hostInstanceStatusAttributeValue)
	dp.Attributes().PutStr("name", nameAttributeValue)
	dp.Attributes().PutStr("host_name", hostNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBiztalkHostInstancesStatus) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBiztalkHostInstancesStatus) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBiztalkHostInstancesStatus(cfg MetricConfig) metricBiztalkHostInstancesStatus {
	m := metricBiztalkHostInstancesStatus{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBiztalkOrchestrationsStatus struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills biztalk.orchestrations_status metric with initial data.
func (m *metricBiztalkOrchestrationsStatus) init() {
	m.data.SetName("biztalk.orchestrations_status")
	m.data.SetDescription("Status of orchestrations in BizTalk Server.")
	m.data.SetUnit("1")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBiztalkOrchestrationsStatus) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, orchestrationStatusAttributeValue string, nameAttributeValue string, descriptionAttributeValue string, hostNameAttributeValue string, applicationNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("orchestration.status", orchestrationStatusAttributeValue)
	dp.Attributes().PutStr("name", nameAttributeValue)
	dp.Attributes().PutStr("description", descriptionAttributeValue)
	dp.Attributes().PutStr("host_name", hostNameAttributeValue)
	dp.Attributes().PutStr("application_name", applicationNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBiztalkOrchestrationsStatus) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBiztalkOrchestrationsStatus) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBiztalkOrchestrationsStatus(cfg MetricConfig) metricBiztalkOrchestrationsStatus {
	m := metricBiztalkOrchestrationsStatus{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBiztalkReceiveLocationsEnabled struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills biztalk.receive_locations_enabled metric with initial data.
func (m *metricBiztalkReceiveLocationsEnabled) init() {
	m.data.SetName("biztalk.receive_locations_enabled")
	m.data.SetDescription("Status of receive locations in BizTalk Server.")
	m.data.SetUnit("1")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBiztalkReceiveLocationsEnabled) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, receiveLocationEnabledAttributeValue bool, nameAttributeValue string, descriptionAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutBool("receive_location.enabled", receiveLocationEnabledAttributeValue)
	dp.Attributes().PutStr("name", nameAttributeValue)
	dp.Attributes().PutStr("description", descriptionAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBiztalkReceiveLocationsEnabled) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBiztalkReceiveLocationsEnabled) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBiztalkReceiveLocationsEnabled(cfg MetricConfig) metricBiztalkReceiveLocationsEnabled {
	m := metricBiztalkReceiveLocationsEnabled{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBiztalkSendPortsStatus struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills biztalk.send_ports_status metric with initial data.
func (m *metricBiztalkSendPortsStatus) init() {
	m.data.SetName("biztalk.send_ports_status")
	m.data.SetDescription("Status of send ports in BizTalk Server.")
	m.data.SetUnit("1")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBiztalkSendPortsStatus) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, sendPortStatusAttributeValue string, nameAttributeValue string, descriptionAttributeValue string, applicationNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("send_port.status", sendPortStatusAttributeValue)
	dp.Attributes().PutStr("name", nameAttributeValue)
	dp.Attributes().PutStr("description", descriptionAttributeValue)
	dp.Attributes().PutStr("application_name", applicationNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBiztalkSendPortsStatus) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBiztalkSendPortsStatus) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBiztalkSendPortsStatus(cfg MetricConfig) metricBiztalkSendPortsStatus {
	m := metricBiztalkSendPortsStatus{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBiztalkSendportGroupsStatus struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills biztalk.sendport_groups_status metric with initial data.
func (m *metricBiztalkSendportGroupsStatus) init() {
	m.data.SetName("biztalk.sendport_groups_status")
	m.data.SetDescription("Status of send port groups in BizTalk Server.")
	m.data.SetUnit("1")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBiztalkSendportGroupsStatus) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, sendPortGroupStatusAttributeValue string, nameAttributeValue string, descriptionAttributeValue string, applicationNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("send_port_group.status", sendPortGroupStatusAttributeValue)
	dp.Attributes().PutStr("name", nameAttributeValue)
	dp.Attributes().PutStr("description", descriptionAttributeValue)
	dp.Attributes().PutStr("application_name", applicationNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBiztalkSendportGroupsStatus) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBiztalkSendportGroupsStatus) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBiztalkSendportGroupsStatus(cfg MetricConfig) metricBiztalkSendportGroupsStatus {
	m := metricBiztalkSendportGroupsStatus{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBiztalkSuspendedInstances struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills biztalk.suspended_instances metric with initial data.
func (m *metricBiztalkSuspendedInstances) init() {
	m.data.SetName("biztalk.suspended_instances")
	m.data.SetDescription("Count of suspended instances in BizTalk Server.")
	m.data.SetUnit("1")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBiztalkSuspendedInstances) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, applicationNameAttributeValue string, serviceTypeAttributeValue string, hostNameAttributeValue string, suspendedInstancesClassAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("application_name", applicationNameAttributeValue)
	dp.Attributes().PutStr("service_type", serviceTypeAttributeValue)
	dp.Attributes().PutStr("host_name", hostNameAttributeValue)
	dp.Attributes().PutStr("suspended_instances.class", suspendedInstancesClassAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBiztalkSuspendedInstances) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBiztalkSuspendedInstances) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBiztalkSuspendedInstances(cfg MetricConfig) metricBiztalkSuspendedInstances {
	m := metricBiztalkSuspendedInstances{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricBiztalkSuspendedMessages struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills biztalk.suspended_messages metric with initial data.
func (m *metricBiztalkSuspendedMessages) init() {
	m.data.SetName("biztalk.suspended_messages")
	m.data.SetDescription("Count of suspended messages in BizTalk Server.")
	m.data.SetUnit("1")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricBiztalkSuspendedMessages) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, applicationNameAttributeValue string, serviceTypeAttributeValue string, hostNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("application_name", applicationNameAttributeValue)
	dp.Attributes().PutStr("service_type", serviceTypeAttributeValue)
	dp.Attributes().PutStr("host_name", hostNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricBiztalkSuspendedMessages) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricBiztalkSuspendedMessages) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricBiztalkSuspendedMessages(cfg MetricConfig) metricBiztalkSuspendedMessages {
	m := metricBiztalkSuspendedMessages{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user config.
type MetricsBuilder struct {
	config                               MetricsBuilderConfig // config of the metrics builder.
	startTime                            pcommon.Timestamp    // start time that will be applied to all recorded data points.
	metricsCapacity                      int                  // maximum observed number of metrics per resource.
	metricsBuffer                        pmetric.Metrics      // accumulates metrics data before emitting.
	buildInfo                            component.BuildInfo  // contains version information.
	resourceAttributeIncludeFilter       map[string]filter.Filter
	resourceAttributeExcludeFilter       map[string]filter.Filter
	metricBiztalkHostInstancesStatus     metricBiztalkHostInstancesStatus
	metricBiztalkOrchestrationsStatus    metricBiztalkOrchestrationsStatus
	metricBiztalkReceiveLocationsEnabled metricBiztalkReceiveLocationsEnabled
	metricBiztalkSendPortsStatus         metricBiztalkSendPortsStatus
	metricBiztalkSendportGroupsStatus    metricBiztalkSendportGroupsStatus
	metricBiztalkSuspendedInstances      metricBiztalkSuspendedInstances
	metricBiztalkSuspendedMessages       metricBiztalkSuspendedMessages
}

// MetricBuilderOption applies changes to default metrics builder.
type MetricBuilderOption interface {
	apply(*MetricsBuilder)
}

type metricBuilderOptionFunc func(mb *MetricsBuilder)

func (mbof metricBuilderOptionFunc) apply(mb *MetricsBuilder) {
	mbof(mb)
}

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) MetricBuilderOption {
	return metricBuilderOptionFunc(func(mb *MetricsBuilder) {
		mb.startTime = startTime
	})
}
func NewMetricsBuilder(mbc MetricsBuilderConfig, settings receiver.Settings, options ...MetricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		config:                               mbc,
		startTime:                            pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:                        pmetric.NewMetrics(),
		buildInfo:                            settings.BuildInfo,
		metricBiztalkHostInstancesStatus:     newMetricBiztalkHostInstancesStatus(mbc.Metrics.BiztalkHostInstancesStatus),
		metricBiztalkOrchestrationsStatus:    newMetricBiztalkOrchestrationsStatus(mbc.Metrics.BiztalkOrchestrationsStatus),
		metricBiztalkReceiveLocationsEnabled: newMetricBiztalkReceiveLocationsEnabled(mbc.Metrics.BiztalkReceiveLocationsEnabled),
		metricBiztalkSendPortsStatus:         newMetricBiztalkSendPortsStatus(mbc.Metrics.BiztalkSendPortsStatus),
		metricBiztalkSendportGroupsStatus:    newMetricBiztalkSendportGroupsStatus(mbc.Metrics.BiztalkSendportGroupsStatus),
		metricBiztalkSuspendedInstances:      newMetricBiztalkSuspendedInstances(mbc.Metrics.BiztalkSuspendedInstances),
		metricBiztalkSuspendedMessages:       newMetricBiztalkSuspendedMessages(mbc.Metrics.BiztalkSuspendedMessages),
		resourceAttributeIncludeFilter:       make(map[string]filter.Filter),
		resourceAttributeExcludeFilter:       make(map[string]filter.Filter),
	}
	if mbc.ResourceAttributes.BiztalkName.MetricsInclude != nil {
		mb.resourceAttributeIncludeFilter["biztalk.name"] = filter.CreateFilter(mbc.ResourceAttributes.BiztalkName.MetricsInclude)
	}
	if mbc.ResourceAttributes.BiztalkName.MetricsExclude != nil {
		mb.resourceAttributeExcludeFilter["biztalk.name"] = filter.CreateFilter(mbc.ResourceAttributes.BiztalkName.MetricsExclude)
	}

	for _, op := range options {
		op.apply(mb)
	}
	return mb
}

// NewResourceBuilder returns a new resource builder that should be used to build a resource associated with for the emitted metrics.
func (mb *MetricsBuilder) NewResourceBuilder() *ResourceBuilder {
	return NewResourceBuilder(mb.config.ResourceAttributes)
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption interface {
	apply(pmetric.ResourceMetrics)
}

type resourceMetricsOptionFunc func(pmetric.ResourceMetrics)

func (rmof resourceMetricsOptionFunc) apply(rm pmetric.ResourceMetrics) {
	rmof(rm)
}

// WithResource sets the provided resource on the emitted ResourceMetrics.
// It's recommended to use ResourceBuilder to create the resource.
func WithResource(res pcommon.Resource) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		res.CopyTo(rm.Resource())
	})
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	})
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(options ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName("go.opentelemetry.io/collector/cmd/mdatagen")
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricBiztalkHostInstancesStatus.emit(ils.Metrics())
	mb.metricBiztalkOrchestrationsStatus.emit(ils.Metrics())
	mb.metricBiztalkReceiveLocationsEnabled.emit(ils.Metrics())
	mb.metricBiztalkSendPortsStatus.emit(ils.Metrics())
	mb.metricBiztalkSendportGroupsStatus.emit(ils.Metrics())
	mb.metricBiztalkSuspendedInstances.emit(ils.Metrics())
	mb.metricBiztalkSuspendedMessages.emit(ils.Metrics())

	for _, op := range options {
		op.apply(rm)
	}
	for attr, filter := range mb.resourceAttributeIncludeFilter {
		if val, ok := rm.Resource().Attributes().Get(attr); ok && !filter.Matches(val.AsString()) {
			return
		}
	}
	for attr, filter := range mb.resourceAttributeExcludeFilter {
		if val, ok := rm.Resource().Attributes().Get(attr); ok && filter.Matches(val.AsString()) {
			return
		}
	}

	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user config, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(options ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(options...)
	metrics := mb.metricsBuffer
	mb.metricsBuffer = pmetric.NewMetrics()
	return metrics
}

// RecordBiztalkHostInstancesStatusDataPoint adds a data point to biztalk.host_instances_status metric.
func (mb *MetricsBuilder) RecordBiztalkHostInstancesStatusDataPoint(ts pcommon.Timestamp, val int64, hostInstanceStatusAttributeValue AttributeHostInstanceStatus, nameAttributeValue string, hostNameAttributeValue string) {
	mb.metricBiztalkHostInstancesStatus.recordDataPoint(mb.startTime, ts, val, hostInstanceStatusAttributeValue.String(), nameAttributeValue, hostNameAttributeValue)
}

// RecordBiztalkOrchestrationsStatusDataPoint adds a data point to biztalk.orchestrations_status metric.
func (mb *MetricsBuilder) RecordBiztalkOrchestrationsStatusDataPoint(ts pcommon.Timestamp, val int64, orchestrationStatusAttributeValue AttributeOrchestrationStatus, nameAttributeValue string, descriptionAttributeValue string, hostNameAttributeValue string, applicationNameAttributeValue string) {
	mb.metricBiztalkOrchestrationsStatus.recordDataPoint(mb.startTime, ts, val, orchestrationStatusAttributeValue.String(), nameAttributeValue, descriptionAttributeValue, hostNameAttributeValue, applicationNameAttributeValue)
}

// RecordBiztalkReceiveLocationsEnabledDataPoint adds a data point to biztalk.receive_locations_enabled metric.
func (mb *MetricsBuilder) RecordBiztalkReceiveLocationsEnabledDataPoint(ts pcommon.Timestamp, val int64, receiveLocationEnabledAttributeValue bool, nameAttributeValue string, descriptionAttributeValue string) {
	mb.metricBiztalkReceiveLocationsEnabled.recordDataPoint(mb.startTime, ts, val, receiveLocationEnabledAttributeValue, nameAttributeValue, descriptionAttributeValue)
}

// RecordBiztalkSendPortsStatusDataPoint adds a data point to biztalk.send_ports_status metric.
func (mb *MetricsBuilder) RecordBiztalkSendPortsStatusDataPoint(ts pcommon.Timestamp, val int64, sendPortStatusAttributeValue AttributeSendPortStatus, nameAttributeValue string, descriptionAttributeValue string, applicationNameAttributeValue string) {
	mb.metricBiztalkSendPortsStatus.recordDataPoint(mb.startTime, ts, val, sendPortStatusAttributeValue.String(), nameAttributeValue, descriptionAttributeValue, applicationNameAttributeValue)
}

// RecordBiztalkSendportGroupsStatusDataPoint adds a data point to biztalk.sendport_groups_status metric.
func (mb *MetricsBuilder) RecordBiztalkSendportGroupsStatusDataPoint(ts pcommon.Timestamp, val int64, sendPortGroupStatusAttributeValue AttributeSendPortGroupStatus, nameAttributeValue string, descriptionAttributeValue string, applicationNameAttributeValue string) {
	mb.metricBiztalkSendportGroupsStatus.recordDataPoint(mb.startTime, ts, val, sendPortGroupStatusAttributeValue.String(), nameAttributeValue, descriptionAttributeValue, applicationNameAttributeValue)
}

// RecordBiztalkSuspendedInstancesDataPoint adds a data point to biztalk.suspended_instances metric.
func (mb *MetricsBuilder) RecordBiztalkSuspendedInstancesDataPoint(ts pcommon.Timestamp, val int64, applicationNameAttributeValue string, serviceTypeAttributeValue string, hostNameAttributeValue string, suspendedInstancesClassAttributeValue string) {
	mb.metricBiztalkSuspendedInstances.recordDataPoint(mb.startTime, ts, val, applicationNameAttributeValue, serviceTypeAttributeValue, hostNameAttributeValue, suspendedInstancesClassAttributeValue)
}

// RecordBiztalkSuspendedMessagesDataPoint adds a data point to biztalk.suspended_messages metric.
func (mb *MetricsBuilder) RecordBiztalkSuspendedMessagesDataPoint(ts pcommon.Timestamp, val int64, applicationNameAttributeValue string, serviceTypeAttributeValue string, hostNameAttributeValue string) {
	mb.metricBiztalkSuspendedMessages.recordDataPoint(mb.startTime, ts, val, applicationNameAttributeValue, serviceTypeAttributeValue, hostNameAttributeValue)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...MetricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op.apply(mb)
	}
}
