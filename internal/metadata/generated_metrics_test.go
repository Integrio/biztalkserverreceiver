// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testDataSet int

const (
	testDataSetDefault testDataSet = iota
	testDataSetAll
	testDataSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		metricsSet  testDataSet
		resAttrsSet testDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			metricsSet:  testDataSetAll,
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "none_set",
			metricsSet:  testDataSetNone,
			resAttrsSet: testDataSetNone,
			expectEmpty: true,
		},
		{
			name:        "filter_set_include",
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "filter_set_exclude",
			resAttrsSet: testDataSetAll,
			expectEmpty: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopSettings()
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, tt.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordBiztalkHostInstancesStatusDataPoint(ts, 1, AttributeHostInstanceStatusStopped, "name-val", "host_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordBiztalkOrchestrationsStatusDataPoint(ts, 1, AttributeOrchestrationStatusUnenlisted, "name-val", "description-val", "host_name-val", "application_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordBiztalkReceiveLocationsEnabledDataPoint(ts, 1, true, "name-val", "description-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordBiztalkSendPortsStatusDataPoint(ts, 1, AttributeSendPortStatusStopped, "name-val", "description-val", "application_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordBiztalkSendportGroupsStatusDataPoint(ts, 1, AttributeSendPortGroupStatusStopped, "name-val", "description-val", "application_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordBiztalkSuspendedInstancesDataPoint(ts, 1, "application_name-val", "service_type-val", "host_name-val", "suspended_instances.class-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordBiztalkSuspendedMessagesDataPoint(ts, 1, "application_name-val", "service_type-val", "host_name-val")

			rb := mb.NewResourceBuilder()
			rb.SetBiztalkName("biztalk.name-val")
			res := rb.Emit()
			metrics := mb.Emit(WithResource(res))

			if tt.expectEmpty {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if tt.metricsSet == testDataSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if tt.metricsSet == testDataSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "biztalk.host_instances_status":
					assert.False(t, validatedMetrics["biztalk.host_instances_status"], "Found a duplicate in the metrics slice: biztalk.host_instances_status")
					validatedMetrics["biztalk.host_instances_status"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Status of host instances in BizTalk Server.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("host_instance.status")
					assert.True(t, ok)
					assert.EqualValues(t, "stopped", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("name")
					assert.True(t, ok)
					assert.EqualValues(t, "name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("host_name")
					assert.True(t, ok)
					assert.EqualValues(t, "host_name-val", attrVal.Str())
				case "biztalk.orchestrations_status":
					assert.False(t, validatedMetrics["biztalk.orchestrations_status"], "Found a duplicate in the metrics slice: biztalk.orchestrations_status")
					validatedMetrics["biztalk.orchestrations_status"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Status of orchestrations in BizTalk Server.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("orchestration.status")
					assert.True(t, ok)
					assert.EqualValues(t, "unenlisted", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("name")
					assert.True(t, ok)
					assert.EqualValues(t, "name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("description")
					assert.True(t, ok)
					assert.EqualValues(t, "description-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("host_name")
					assert.True(t, ok)
					assert.EqualValues(t, "host_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("application_name")
					assert.True(t, ok)
					assert.EqualValues(t, "application_name-val", attrVal.Str())
				case "biztalk.receive_locations_enabled":
					assert.False(t, validatedMetrics["biztalk.receive_locations_enabled"], "Found a duplicate in the metrics slice: biztalk.receive_locations_enabled")
					validatedMetrics["biztalk.receive_locations_enabled"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Status of receive locations in BizTalk Server.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("receive_location.enabled")
					assert.True(t, ok)
					assert.True(t, attrVal.Bool())
					attrVal, ok = dp.Attributes().Get("name")
					assert.True(t, ok)
					assert.EqualValues(t, "name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("description")
					assert.True(t, ok)
					assert.EqualValues(t, "description-val", attrVal.Str())
				case "biztalk.send_ports_status":
					assert.False(t, validatedMetrics["biztalk.send_ports_status"], "Found a duplicate in the metrics slice: biztalk.send_ports_status")
					validatedMetrics["biztalk.send_ports_status"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Status of send ports in BizTalk Server.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("send_port.status")
					assert.True(t, ok)
					assert.EqualValues(t, "stopped", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("name")
					assert.True(t, ok)
					assert.EqualValues(t, "name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("description")
					assert.True(t, ok)
					assert.EqualValues(t, "description-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("application_name")
					assert.True(t, ok)
					assert.EqualValues(t, "application_name-val", attrVal.Str())
				case "biztalk.sendport_groups_status":
					assert.False(t, validatedMetrics["biztalk.sendport_groups_status"], "Found a duplicate in the metrics slice: biztalk.sendport_groups_status")
					validatedMetrics["biztalk.sendport_groups_status"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Status of send port groups in BizTalk Server.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("send_port_group.status")
					assert.True(t, ok)
					assert.EqualValues(t, "stopped", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("name")
					assert.True(t, ok)
					assert.EqualValues(t, "name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("description")
					assert.True(t, ok)
					assert.EqualValues(t, "description-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("application_name")
					assert.True(t, ok)
					assert.EqualValues(t, "application_name-val", attrVal.Str())
				case "biztalk.suspended_instances":
					assert.False(t, validatedMetrics["biztalk.suspended_instances"], "Found a duplicate in the metrics slice: biztalk.suspended_instances")
					validatedMetrics["biztalk.suspended_instances"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Count of suspended instances in BizTalk Server.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("application_name")
					assert.True(t, ok)
					assert.EqualValues(t, "application_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("service_type")
					assert.True(t, ok)
					assert.EqualValues(t, "service_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("host_name")
					assert.True(t, ok)
					assert.EqualValues(t, "host_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("suspended_instances.class")
					assert.True(t, ok)
					assert.EqualValues(t, "suspended_instances.class-val", attrVal.Str())
				case "biztalk.suspended_messages":
					assert.False(t, validatedMetrics["biztalk.suspended_messages"], "Found a duplicate in the metrics slice: biztalk.suspended_messages")
					validatedMetrics["biztalk.suspended_messages"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Count of suspended messages in BizTalk Server.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("application_name")
					assert.True(t, ok)
					assert.EqualValues(t, "application_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("service_type")
					assert.True(t, ok)
					assert.EqualValues(t, "service_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("host_name")
					assert.True(t, ok)
					assert.EqualValues(t, "host_name-val", attrVal.Str())
				}
			}
		})
	}
}
